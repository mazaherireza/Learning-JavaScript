CycleTracker
------------
... intro-level tutorial ...
... CycleTracker is designed to work in all browsers on all devices.

By default, PWAs are regular websites, built with the same technologies. 
Just like regular websites, PWAs are linkable, discoverable via search engines, and visible in a browser. 
By including a manifest file, and serving the website over TLS (Transport Layer Security), any website can become a PWA. <---------- *

PWA benefits
------------
Using the languages of the web, we will create a fully functioning application that works both online and offline, 
both in the browsers and on the user's operating systems (OS). 

Like any regular website, ... is hosted on and downloadable from a web server. 
..., like all PWAs, doesn't require any additional programming language knowledge, packaging, or proprietary SDK. <------------ **
..., like any PWA, can be seamlessly installed on any operating system without the need of app stores 
(nor app store approval and fees).

Use standard and open web technologies
--------------------------------------
Historically, for an application to be installable on an OS, such as Windows, iOS, MacOS, Linux, and Android, 
the applications are developed in OS-supported programming languages, like C#, .Net, Objective C, Swift, Kotlin, Java, or Python. 
PWAs are based on a different model: they use a single code base, 
written using standard open web technologies (HTML, CSS, and JavaScript) that work across OSes.

No compiling required
---------------------
With most programming languages—like Java, C/C++, and Kotlin, which are commonly used for building Android apps, 
and Objective-C and Swift, for iOS—the code needs to be compiled and packaged into an installable format, 
like .exe, .dmg, .elf, and .apk, or another installable file type, depending on the operating system. <---------- **
Depending on the language, compiling and packaging may require the OS's SDK. 

PWAs use web technologies supported by every OS that doesn't need to be packaged or compiled. <---------- **
PWAs can be built out of just HTML and JavaScript (and CSS, though styling is not necessarily required for a PWA).

Available anywhere and everywhere
---------------------------------
Single-OS-only applications are distributed to users through downloads, often in proprietary app stores. 
They are available through a vendor like the Apple App Store, ...
PWAs don't have these requirements. 
If you want to distribute your app, you won't require an intermediary. 
A user can access your app by visiting its online version. 
But if you want, it is possible to distribute your PWA on the Play Store and App Store, undifferentiated from other iOS or Android apps.

Easy for the user to install
----------------------------
Historically, downloaded single-OS-only applications have to be intentionally installed by the user. 
Depending on the OS, install format, and download origin, this can be a multi-step installation process. 
PWAs are streamlined. 
PWAs are available to anyone with a supporting browser, and are installable with a couple of clicks.

Compared to OS-installed software applications
----------------------------------------------
Once installed, PWAs can be made to appear and act similarly to other applications installed on the user's device:

Application window
------------------

Application icon
----------------

Works offline
-------------
Internet access is initially required to download the application and is also required when syncing data with the server or other users. 
This is required of all applications, not just PWAs.
We'll add a service worker to create an offline experience, <------------- **
 ... will work even when the user loses internet access. 
We will only touch on the power of PWA offline support. 
Service workers can be used to make PWAs work offline just like any other installed application. <---------- **

If a user makes changes while offline, service workers enable PWAs to sync data once connectivity is restored. <---------- **
With service workers, the user doesn't need to be actively engaging with the PWA, in fact, 
the PWA doesn't even need to be open, for it to send and retrieve server data.

CycleTracker PWA lessons
------------------------
...
We'll create a static website shell and style it, then learn how to create a secure connection to view our progress. 
We'll add JavaScript functionality converting the HTML and CSS shell into a fully functioning application storing data in localStorage. 
...
... We will progressively enhance this web app into an offline capable PWA by adding a manifest file, 
including iconography, and a service worker.

The steps include:

App HTML and CSS
----------------

Local development environment or secure connection
--------------------------------------------------
In order to be installable, PWAs MUST be served with the https:// protocol, 
or as locally-delivered resources using 127.0.0.1 or localhost URLs served with the http:// protocol.
...

JavaScript and LocalStorage
---------------------------
... a client-side web application ...

Manifest: identity, appearance, and iconography
-----------------------------------------------
A PWA requires a manifest, which is a JSON file that describes the name, 
icon, description, and other definitions of how the application works within the OS on which the PWA is installed.
...

Service workers
---------------
The service worker enables the application to work offline. <------------- **
With the secure connection, the initial visit to a page provides its baseline functionality while the service worker downloads. 
After a service worker is installed and activated, it controls the page to offer improved reliability and speed.